<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>WikiTok - Mechanics Edition</title>
  <meta name="description" content="A TikTok style feed for Mechanics (Physics) articles from Wikipedia">
  <link rel="icon" type="image/svg+xml" href="favicon.svg">
  <style>
    /* Global styles with dark background */
    html, body {
    width: 100%;
    height: 100vh;
    margin: 0;
    padding: 0;
    overflow: hidden;
}

    <div id="fullPageContainer">
   #fullPageContainer {
    width: 100%;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

    h2 {
      margin-top: 0;
    }
    /* Loader styles */
    #loader {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #222;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 2000;
      color: white;
      font-size: 20px;
    }
    .spinner {
      border: 8px solid #444;
      border-top: 8px solid #fff;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    /* Container for articles */
    #container {
      height: 100vh;
      overflow-y: scroll;
      scroll-snap-type: y mandatory;
      scroll-behavior: smooth;
    }
    /* Each article section */
    .article {
      scroll-snap-align: start;
      height: 100vh;
      position: relative;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
    }
    /* Article overlay at bottom */
    .overlay {
      position: absolute;
      bottom: 10vh;
      left: 0;
      right: 0;
      color: #fff;
      padding: 20px;
      box-sizing: border-box;
    }
    .overlay .article-title {
      margin: 0 0 10px;
      font-size: 1.4em;
      padding-top: 2px;
      width: calc(100% - 90px);
      color: #fff;
      font-weight: bold;
    }
    .overlay p {
      margin: 0;
      line-height: 1.6;
      overflow: hidden;
      max-height: 130px;
      display: -webkit-box;
      -webkit-line-clamp: 5;
      -webkit-box-orient: vertical;
    }
    .overlay a {
      color: #ffd700;
      text-decoration: none;
      margin-top: 10px;
      display: inline-block;
    }
    /* Article category – small text at the top left of the overlay */
    .article-category {
      position: absolute;
      top: 5px;
      left: 5px;
      font-size: 12px;
      color: #fff;
      background-color: rgba(0, 0, 0, 0.5);
      padding: 2px 4px;
      border-radius: 3px;
    }
    /* Icon container in overlay (top right) */
    .icon-container {
      position: absolute;
      top: 15px;
      right: 15px;
      display: flex;
      gap: 10px;
    }
    .icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: rgba(0,0,0,0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      flex-shrink: 0;
      user-select: none;
      -webkit-tap-highlight-color: transparent;
    }
    .icon svg {
      user-select: none;
    }
    /* Share icon styling */
    .share.icon svg {
      width: 26px;
      height: 26px;
    }
    /* Global icons container */
    #global-icons-container {
      position: fixed;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
      z-index: 1000;
    }
    .global-bookmark {
      width: 40px;
      height: 40px;
      background-color: black;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
    .global-bookmark svg {
      width: 24px;
      height: 24px;
    }
    .global-language {
      display: flex;
      align-items: center;
      background-color: black;
      color: white;
      padding: 3px 8px;
      border-radius: 20px;
      font-size: 14px;
      cursor: pointer;
      height: 32px;
    }
    .global-language svg {
      width: 14px;
      height: 14px;
      margin-right: 4px;
      fill: white;
    }
    /* Language Dropdown */
    .language-dropdown {
      position: fixed;
      top: 70px;
      right: 20px;
      background-color: black;
      border: 1px solid #444;
      border-radius: 5px;
      z-index: 1000;
      display: none;
      min-width: 120px;
    }
    .language-option {
      padding: 8px 12px;
      cursor: pointer;
      color: white;
    }
    .language-option:hover {
      background-color: #333;
    }
    /* Modal styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1001;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.7);
    }
    .modal-content {
      background-color: #222;
      color: #fff;
      margin: 5% auto;
      padding: 20px 15px;
      border: 1px solid #444;
      width: 80%;
      max-height: 80%;
      overflow-y: auto;
      position: relative;
    }
    .modal-close {
      color: #aaa;
      position: absolute;
      top: 5px;
      right: 10px;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    .modal-close:hover,
    .modal-close:focus {
      color: #fff;
      text-decoration: none;
    }
    /* Search input in modal */
    #bookmark-search {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
      font-size: 16px;
      border: 1px solid #444;
      background-color: #333;
      color: #fff;
      box-sizing: border-box;
    }
    /* Bookmark modal item styles */
    .bookmark-item {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
      border-bottom: 1px solid #444;
      padding: 10px 5px;
      text-decoration: none;
      color: inherit;
      position: relative;
    }
    .bookmark-item img {
      object-fit: cover;
      width: 100%;
      height: 100%;
    }
    .bookmark-item h3 {
      margin: 0;
      font-size: 1.2em;
    }
    .bookmark-item p {
      margin: 5px 0 0 0;
      font-size: 0.9em;
      color: #ccc;
      display: -webkit-box;
      -webkit-line-clamp: 4;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    .bookmark-img-container {
      width: 80px;
      height: 80px;
      flex-shrink: 0;
      margin-right: 15px;
      overflow: hidden;
      max-width: 25%;
      max-height: 25%;
    }
    .remove-bookmark {
      font-size: 18px;
      color: #f00;
      margin-left: auto;
      cursor: pointer;
      position: relative;
      right: -5px;
    }
    /* Logo styles */
    #logo {
      position: fixed;
      top: 20px;
      left: 20px;
      color: white;
      font-weight: bold;
      font-size: 30px;
      z-index: 1001;
      text-decoration: none;
      filter: drop-shadow(2px 2px 3px rgba(0, 0, 0, 0.8));
    }
    .dimmer {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.6);
    }
    #links {
      position: absolute;
      bottom: 10px;
      right: 10px;
      font-size: 12px;
    }
    #links a {
      color: #eee;
    }
    #links span {
      color: #aaa;
    }
    ::-webkit-scrollbar {
      display: none;
    }
    .toast {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0,0,0,0.8);
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      font-size: 14px;
      z-index: 2000;
      opacity: 1;
      transition: opacity 0.5s ease-out;
    }
  </style>
</head>
<body>
  <a id="logo" href="/">WikiTok</a>

  <!-- Loader Animation -->
  <div id="loader">
    <div class="spinner"></div>
    <div style="margin-top: 20px;">Loading</div>
  </div>
  
  <!-- Global Icons Container -->
  <div id="global-icons-container">
    <div id="global-bookmark" class="global-bookmark"></div>
    <div id="global-language" class="global-language">
      <span id="current-lang">ENG</span>
    </div>
  </div>
  
  <!-- Language Dropdown -->
  <div id="language-dropdown" class="language-dropdown"></div>
  
  <!-- Container for dynamically loaded article sections -->
  <div id="container"></div>
  
  <!-- Modal for displaying saved bookmarks -->
  <div id="bookmark-modal" class="modal">
    <div class="modal-content">
      <span class="modal-close">&times;</span>
      <h2>Your Bookmarks</h2>
      <input type="text" id="bookmark-search" placeholder="Search bookmarks...">
      <div id="bookmark-list"></div>
    </div>
  </div>
  
  <!-- SVG Templates -->
  <template id="bookmark-icon-template">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
    </svg>
  </template>
  
  <template id="outlined-heart-template">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path>
    </svg>
  </template>
  
  <template id="filled-heart-template">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path>
    </svg>
  </template>
  
  <template id="share-icon-template">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="18" cy="5" r="3"></circle>
      <circle cx="6" cy="12" r="3"></circle>
      <circle cx="18" cy="19" r="3"></circle>
      <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
      <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
    </svg>
  </template>
  
  <script>
    /********************
     * INITIAL SETUP *
     ********************/
    const globalBookmarkElement = document.getElementById("global-bookmark");
    const globalBookmarkClone = document.getElementById("bookmark-icon-template").content.firstElementChild.cloneNode(true);
    globalBookmarkClone.setAttribute("width", "24");
    globalBookmarkClone.setAttribute("height", "24");
    globalBookmarkElement.appendChild(globalBookmarkClone);
    
    /********************
     * CONFIGURATION & STATE *
     ********************/
    let currentLanguage = 'en';
    let currentLanguageDisplay = 'ENG';
    const languages = [
      { code: 'en', display: 'ENG', name: 'English' },
      { code: 'es', display: 'ESP', name: 'Español' },
      { code: 'de', display: 'DEU', name: 'Deutsch' },
      { code: 'fr', display: 'FRA', name: 'Français' },
      { code: 'it', display: 'ITA', name: 'Italiano' },
      { code: 'nl', display: 'NLD', name: 'Dutch' },
      { code: 'pl', display: 'POL', name: 'Polish' },
      { code: 'pt', display: 'POR', name: 'Português' },
      { code: 'ru', display: 'RUS', name: 'Русский' },
      { code: 'sv', display: 'SWE', name: 'Svenska' },
      { code: 'ko', display: 'KOR', name: '한국어' },
      { code: 'zh', display: 'CHI', name: '中文' },
      { code: 'ja', display: 'JPN', name: '日本語' }
    ];
    
    /********************
     * ARTICLE CACHING *
     ********************/
    const articleCache = [];
    let isPreloading = false;
    const CACHE_THRESHOLD = 5;
    const BULK_FETCH_COUNT = 10;  // Number of articles to fetch at a time
    
    // Modified preloadArticles to fetch only mechanics-related articles
    async function preloadArticles() {
      if (isPreloading) return;
      isPreloading = true;
      const searchTerm = "classical mechanics"; // Adjust the search term as needed
      const url = `https://${currentLanguage}.wikipedia.org/w/api.php?action=query&format=json&generator=search&gsrsearch=${encodeURIComponent(searchTerm)}&gsrlimit=${BULK_FETCH_COUNT}&prop=extracts|pageimages|info&inprop=url&exintro=1&explaintext=1&piprop=thumbnail&pithumbsize=400&origin=*`;
      try {
        const response = await fetch(url);
        const json = await response.json();
        if (json.query && json.query.pages) {
          const articles = Object.values(json.query.pages);
          const validArticles = articles.filter(article => article.thumbnail && article.thumbnail.source);
          validArticles.forEach(article => articleCache.push(article));
        }
      } catch (error) {
        console.error("Error fetching mechanics articles:", error);
      }
      isPreloading = false;
    }
    
    // Function to fetch a specific article by its pageid
    async function fetchArticleById(pageId) {
      const url = `https://${currentLanguage}.wikipedia.org/w/api.php?action=query&format=json&pageids=${pageId}&prop=extracts|pageimages|info&inprop=url&exintro=1&explaintext=1&piprop=thumbnail&pithumbsize=400&origin=*`;
      try {
        const response = await fetch(url);
        const json = await response.json();
        if (json.query && json.query.pages) {
          return Object.values(json.query.pages)[0];
        }
        return null;
      } catch (error) {
        console.error("Error fetching article by id:", error);
        return null;
      }
    }
    
    /***************************
     * BOOKMARK HANDLING *
     ***************************/
    function isBookmarked(title) {
      const bookmarks = JSON.parse(localStorage.getItem("bookmarkedArticles") || "[]");
      return bookmarks.some(item => item.title === title);
    }
    
    function addBookmark(article) {
      // Only add articles related to mechanics
      if (!article.title.toLowerCase().includes("mechanics") &&
          !article.extract.toLowerCase().includes("mechanics")) {
        return;
      }
      let bookmarks = JSON.parse(localStorage.getItem("bookmarkedArticles") || "[]");
      bookmarks.push({
        title: article.title,
        image: (article.thumbnail && article.thumbnail.source) ? article.thumbnail.source : "",
        summary: article.extract,
        url: article.fullurl || (article.content_urls && article.content_urls.desktop && article.content_urls.desktop.page) || "#"
      });
      localStorage.setItem("bookmarkedArticles", JSON.stringify(bookmarks));
    }
    
    function removeBookmark(articleOrItem) {
      let bookmarks = JSON.parse(localStorage.getItem("bookmarkedArticles") || "[]");
      bookmarks = bookmarks.filter(item => item.title !== articleOrItem.title);
      localStorage.setItem("bookmarkedArticles", JSON.stringify(bookmarks));
    }
    
    function toggleBookmark(article, bookmarkIcon) {
      if (!isBookmarked(article.title)) {
        const filledHeart = document.getElementById("filled-heart-template").content.firstElementChild.cloneNode(true);
        bookmarkIcon.innerHTML = "";
        bookmarkIcon.appendChild(filledHeart);
        bookmarkIcon.style.backgroundColor = "red";
        addBookmark(article);
      } else {
        const outlinedHeart = document.getElementById("outlined-heart-template").content.firstElementChild.cloneNode(true);
        bookmarkIcon.innerHTML = "";
        bookmarkIcon.appendChild(outlinedHeart);
        bookmarkIcon.style.backgroundColor = "rgba(0,0,0,0.8)";
        removeBookmark(article);
      }
    }
    
    /***************************
     * ARTICLE SECTION CREATION *
     ***************************/
    function createArticleSection(article) {
      // Filter out articles that do not mention "mechanics"
      if (!article.title.toLowerCase().includes("mechanics") && 
          !article.extract.toLowerCase().includes("mechanics") &&
          !(article.description && article.description.toLowerCase().includes("mechanics"))) {
        return null;
      }
      
      const section = document.createElement('section');
      section.classList.add('article');
      
      // Set background image or fallback color.
      if (article.thumbnail && article.thumbnail.source) {
        section.style.backgroundImage = `url(${article.thumbnail.source})`;
      } else {
        section.style.backgroundColor = '#333';
        return null;
      }
      
      const dimmer = document.createElement('div');
      dimmer.classList.add('dimmer');
      
      const overlay = document.createElement('div');
      overlay.classList.add('overlay');
      
      if (article.description) {
        const categoryEl = document.createElement('div');
        categoryEl.classList.add('article-category');
        categoryEl.textContent = article.description;
        overlay.appendChild(categoryEl);
      }
      
      const readMoreURL = article.fullurl || (article.content_urls && article.content_urls.desktop && article.content_urls.desktop.page);
      
      const title = document.createElement('a');
      title.textContent = article.title || 'No Title';
      title.classList.add('article-title');
      title.href = readMoreURL;
      title.target = '_blank';
      overlay.appendChild(title);
      
      const summary = document.createElement('p');
      summary.textContent = article.extract || 'No summary available.';
      overlay.appendChild(summary);
      
      if (readMoreURL) {
        const link = document.createElement('a');
        link.href = readMoreURL;
        link.target = '_blank';
        link.textContent = 'Read more on Wikipedia';
        overlay.appendChild(link);
      }
      
      const iconContainer = document.createElement('div');
      iconContainer.classList.add('icon-container');
      
      const bookmarkIcon = document.createElement('div');
      bookmarkIcon.classList.add('icon', 'bookmark');
      if (isBookmarked(article.title)) {
        const filledHeart = document.getElementById("filled-heart-template").content.firstElementChild.cloneNode(true);
        bookmarkIcon.appendChild(filledHeart);
        bookmarkIcon.style.backgroundColor = "red";
      } else {
        const outlinedHeart = document.getElementById("outlined-heart-template").content.firstElementChild.cloneNode(true);
        bookmarkIcon.appendChild(outlinedHeart);
        bookmarkIcon.style.backgroundColor = "rgba(0,0,0,0.8)";
      }
      bookmarkIcon.addEventListener('click', function(e) {
        e.stopPropagation();
        toggleBookmark(article, bookmarkIcon);
      });
      iconContainer.appendChild(bookmarkIcon);
      
      const shareIcon = document.createElement('div');
      shareIcon.classList.add('icon', 'share');
      const shareSvg = document.getElementById("share-icon-template").content.firstElementChild.cloneNode(true);
      shareIcon.appendChild(shareSvg);
      shareIcon.addEventListener('click', async function(e) {
        e.stopPropagation();
        const shareUrl = window.location.protocol + "//" + window.location.host + "/" + article.pageid;
         if (navigator.share) {
          navigator.share({
            title: article.title,
            text: article.extract,
            url: shareUrl
          }).catch((error) => console.error('Error sharing:', error));
        } else if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(shareUrl)
            .then(() => {
              showToast("Link copied to clipboard.");
            })
            .catch((error) => {
              console.error("Clipboard error:", error);
              showToast("Failed to copy link.");
            });
        } else {
          let textarea = document.createElement('textarea');
          textarea.value = shareUrl;
          document.body.appendChild(textarea);
          textarea.select();
          try {
            document.execCommand('copy');
            showToast("Link copied to clipboard.");
          } catch (err) {
            console.error("execCommand error", err);
            showToast("Failed to copy link.");
          }
          document.body.removeChild(textarea);
        }
      });
      iconContainer.appendChild(shareIcon);
      
      overlay.appendChild(iconContainer);
      section.appendChild(dimmer);
      section.appendChild(overlay);
      return section;
    }
    
    /***************************
     * SCROLL & OBSERVER *
     ***************************/
    const container = document.getElementById('container');
    const observerOptions = {
      root: container,
      threshold: 0.5
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          observer.unobserve(entry.target);
          addArticle();
        }
      });
    }, observerOptions);
    
    async function addArticle() {
      if (articleCache.length === 0) {
        await preloadArticles();
      }
      const articleData = articleCache.shift();
      if (!articleData) return;
      const section = createArticleSection(articleData);
      if (section) {
        container.appendChild(section);
        observer.observe(section);
      }
      if (articleCache.length <= CACHE_THRESHOLD) {
        preloadArticles();
      }
    }
    
    // Handle URL path for specific article pageid
    const path = window.location.pathname.replace(/\//g, "");
    if (path && !isNaN(path)) {
      fetchArticleById(path).then(article => {
        if (article) {
          const section = createArticleSection(article);
          if (section) {
            container.appendChild(section);
            observer.observe(section);
          }
        }
        if (window.history.replaceState) {
          window.history.replaceState(null, "", "/");
        }
        addArticle();
        addArticle();
        document.getElementById('loader').style.display = 'none';
      });
    } else {
      preloadArticles().then(() => {
        addArticle();
        addArticle();
        document.getElementById('loader').style.display = 'none';
      });
    }
    
    /***************************
     * BOOKMARK MODAL HANDLING *
     ***************************/
    const globalBookmark = document.getElementById('global-bookmark');
    const bookmarkModal = document.getElementById('bookmark-modal');
    const modalClose = document.querySelector('.modal-close');
    const bookmarkList = document.getElementById('bookmark-list');
    const bookmarkSearch = document.getElementById('bookmark-search');
    
    globalBookmark.addEventListener('click', () => {
      populateBookmarks();
      bookmarkModal.style.display = 'block';
    });
    
    modalClose.addEventListener('click', () => {
      bookmarkModal.style.display = 'none';
    });
    
    window.addEventListener('click', (event) => {
      if (event.target === bookmarkModal) {
        bookmarkModal.style.display = 'none';
      }
    });
    
    bookmarkSearch.addEventListener('input', populateBookmarks);
    
    // Levenshtein distance for fuzzy matching
    function levenshtein(a, b) {
      const matrix = [];
      const aLen = a.length;
      const bLen = b.length;
      for (let i = 0; i <= aLen; i++) {
        matrix[i] = [i];
      }
      for (let j = 0; j <= bLen; j++) {
        matrix[0][j] = j;
      }
      for (let i = 1; i <= aLen; i++) {
        for (let j = 1; j <= bLen; j++) {
          if (a.charAt(i - 1) === b.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(
              matrix[i - 1][j - 1] + 1,
              Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1)
            );
          }
        }
      }
      return matrix[aLen][bLen];
    }
    
    function fuzzyMatch(text, query) {
      text = text.toLowerCase();
      query = query.toLowerCase();
      if(query === "") return true;
      if(text.includes(query)) return true;
      let threshold = Math.max(1, Math.floor(text.length * 0.3));
      let dist = levenshtein(text, query);
      return dist <= threshold;
    }
    
    function populateBookmarks() {
      bookmarkList.innerHTML = '';
      const bookmarks = JSON.parse(localStorage.getItem("bookmarkedArticles") || "[]");
      const query = bookmarkSearch.value.trim();
      const filtered = bookmarks.filter(item => fuzzyMatch(item.title, query));
      if (filtered.length === 0) {
        bookmarkList.innerHTML = '<p>No bookmarks match your search.</p>';
        return;
      }
      filtered.forEach(item => {
        const itemLink = document.createElement('a');
        itemLink.classList.add('bookmark-item');
        itemLink.href = item.url;
        itemLink.target = '_blank';
        if (item.image) {
          const imgContainer = document.createElement('div');
          imgContainer.classList.add('bookmark-img-container');
          const img = document.createElement('img');
          img.src = item.image;
          img.alt = item.title;
          imgContainer.appendChild(img);
          itemLink.appendChild(imgContainer);
        }
        const textContainer = document.createElement('div');
        const itemTitle = document.createElement('h3');
        itemTitle.textContent = item.title;
        const itemSummary = document.createElement('p');
        itemSummary.textContent = item.summary;
        textContainer.appendChild(itemTitle);
        textContainer.appendChild(itemSummary);
        itemLink.appendChild(textContainer);
        const removeIcon = document.createElement('span');
        removeIcon.classList.add('remove-bookmark');
        removeIcon.textContent = "✖";
        removeIcon.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          removeBookmark(item);
          populateBookmarks();
        });
        itemLink.appendChild(removeIcon);
        bookmarkList.appendChild(itemLink);
      });
    }
    
    /***************************
     * LANGUAGE SELECTOR HANDLING *
     ***************************/
    const globalLanguage = document.getElementById('global-language');
    const languageDropdown = document.getElementById('language-dropdown');
    const currentLangSpan = document.getElementById('current-lang');
    
    function populateLanguageDropdown() {
      languageDropdown.innerHTML = '';
      languages.forEach(lang => {
        const option = document.createElement('div');
        option.classList.add('language-option');
        option.textContent = lang.name + " (" + lang.display + ")";
        option.dataset.code = lang.code;
        option.dataset.display = lang.display;
        option.addEventListener('click', () => {
          document.getElementById('loader').style.display = 'flex';
          currentLanguage = option.dataset.code;
          currentLanguageDisplay = option.dataset.display;
          currentLangSpan.textContent = currentLanguageDisplay;
          languageDropdown.style.display = 'none';
          document.getElementById('container').innerHTML = '';
          articleCache.length = 0;
          preloadArticles().then(() => {
            addArticle();
            addArticle();
            document.getElementById('loader').style.display = 'none';
          });
        });
        languageDropdown.appendChild(option);
      });
    }
    
    populateLanguageDropdown();
    
    globalLanguage.addEventListener('click', (e) => {
      e.stopPropagation();
      if (languageDropdown.style.display === 'block') {
        languageDropdown.style.display = 'none';
      } else {
        languageDropdown.style.display = 'block';
      }
    });
    
    window.addEventListener('click', (e) => {
      if (languageDropdown.style.display === 'block') {
        languageDropdown.style.display = 'none';
      }
    });
    
    function showToast(message) {
      const toast = document.createElement('div');
      toast.classList.add('toast');
      toast.textContent = message;
      document.body.appendChild(toast);
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 500);
      }, 3000);
    }
  </script>
  
  <div id="arrow" class="scroll-down"></div>
  
  <div id="links">
    <a href="/cdn-cgi/l/email-protection#0c6f6362786d6f784c7b65676578636722626978">contact</a><span>&nbsp;|&nbsp;</span>
    <a target="_BLANK" href="https://movietok.app">movietok</a><span>&nbsp;|&nbsp;</span>
    <a target="_BLANK" href="https://quotetok.com">quotetok</a>
  </div>
  <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script>
  <script>
    if (localStorage.getItem("scroll")) {
      document.getElementById("arrow").remove();
    }
    setTimeout(function(){
      if (document.getElementById("arrow")){
        document.getElementById("arrow").remove();
        localStorage.setItem("scroll","1");
      }
    },10000);
  </script>
  <script defer data-domain="wikitok.net" src="https://milkymouse.com/js/script.js"></script>
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-2XBW30R7BY"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'G-2XBW30R7BY');
  </script>
  </div>
</body>
</html>
